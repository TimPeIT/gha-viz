#!/usr/bin/env node
// GHA-Viz: Liest eine GitHub-Actions-YAML und zeigt Jobs/Steps/Abhängigkeiten.
// Befehle:
//   node index.js text   <pfad-zur-yaml>
//   node index.js diagram <pfad-zur-yaml>   # schreibt output/diagram.html

const fs = require("fs");
const path = require("path");
const yaml = require("js-yaml");

// ---------- Einfache Parser-Funktionen ----------
function loadYaml(filePath) {
  const raw = fs.readFileSync(filePath, "utf8");
  const doc = yaml.load(raw);
  if (!doc || typeof doc !== "object") throw new Error("Leere oder ungültige YAML");
  return doc;
}

function parseWorkflow(doc) {
  // Wir interessieren uns für: on, jobs, jobs.<name>.needs, jobs.<name>.steps
  const triggers = doc.on || doc["on"]; // "on" kann string/array/object sein
  const jobs = doc.jobs || {};
  const jobNames = Object.keys(jobs);

  const items = jobNames.map((name) => {
    const j = jobs[name] || {};
    const needs = Array.isArray(j.needs) ? j.needs : (j.needs ? [j.needs] : []);
    const steps = Array.isArray(j.steps) ? j.steps : [];
    const stepSummaries = steps.map((s, i) => {
      if (s.uses) return `#${i+1} uses ${s.uses}`;
      if (s.run) return `#${i+1} run  ${String(s.run).split("\n")[0]}`;
      return `#${i+1} (unknown step)`;
    });
    return { name, needs, stepSummaries };
  });

  // einfache Warnung für unbekannte Top-Level-Keys (Anfängersicht)
  const knownTop = new Set(["name","on","jobs","permissions","env","defaults","concurrency"]);
  const unknownKeys = Object.keys(doc).filter(k => !knownTop.has(k));
  return { triggers, items, unknownKeys };
}

// ---------- Ausgabe: Text ----------
function renderText(model) {
  const lines = [];
  // Triggers
  lines.push("== Triggers ==");
  if (typeof model.triggers === "string") lines.push(`- ${model.triggers}`);
  else if (Array.isArray(model.triggers)) model.triggers.forEach(t => lines.push(`- ${t}`));
  else if (model.triggers && typeof model.triggers === "object") lines.push("- complex trigger (push/pull_request etc.)");
  else lines.push("- (none)");

  // Jobs
  lines.push("\n== Jobs ==");
  model.items.forEach(j => {
    lines.push(`* ${j.name}`);
    if (j.needs.length) lines.push(`  needs: ${j.needs.join(", ")}`);
    else lines.push(`  needs: (none)`);
    if (j.stepSummaries.length) {
      lines.push("  steps:");
      j.stepSummaries.forEach(s => lines.push(`    - ${s}`));
    } else {
      lines.push("  steps: (none)");
    }
  });

  // ASCII-Edges
  lines.push("\n== Dependencies (ASCII) ==");
  const edges = [];
  model.items.forEach(j => j.needs.forEach(n => edges.push(`${n} -> ${j.name}`)));
  if (edges.length) edges.forEach(e => lines.push(`- ${e}`));
  else lines.push("- (none)");

  // Unbekannte Keys
  if (model.unknownKeys.length) {
    lines.push("\n== Hinweis ==");
    lines.push(`Unbekannte Top-Level-Keys: ${model.unknownKeys.join(", ")}`);
  }

  return lines.join("\n");
}

// ---------- Ausgabe: HTML (Mermaid für Graph) ----------
function renderMermaid(model) {
  // Direkter Graph: nodes + edges, z.B. build --> test
  const nodes = new Set(model.items.map(j => j.name));
  const edges = [];
  model.items.forEach(j => j.needs.forEach(n => edges.push([n, j.name])));

  const lines = ["flowchart LR"];
  nodes.forEach(n => lines.push(`  ${n}["${n}"]`));
  edges.forEach(([a,b]) => lines.push(`  ${a} --> ${b}`));
  if (edges.length === 0) lines.push("  A[No Dependencies]");

  return lines.join("\n");
}

function renderHTML(model) {
  const mermaid = renderMermaid(model);
  const text = renderText(model).replace(/&/g,"&amp;").replace(/</g,"&lt;");

  return `<!doctype html>
<html lang="de">
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width,initial-scale=1"/>
<title>GHA Diagram</title>
<script src="https://cdn.jsdelivr.net/npm/mermaid@10/dist/mermaid.min.js"></script>
<script>mermaid.initialize({ startOnLoad: true });</script>
<style>
  body{font-family:system-ui,sans-serif;margin:1rem auto;max-width:1000px;padding:0 1rem}
  pre{background:#f6f8fa;border:1px solid #ddd;border-radius:8px;padding:12px;overflow:auto}
  .grid{display:grid;grid-template-columns:1fr;gap:16px}
  @media(min-width:900px){.grid{grid-template-columns:1fr 1fr}}
  .card{border:1px solid #ddd;border-radius:12px;padding:12px}
</style>
</head>
<body>
<h1>GitHub Actions Diagram</h1>
<div class="grid">
  <div class="card">
    <h2>Graph</h2>
    <div class="mermaid">
${mermaid}
    </div>
  </div>
  <div class="card">
    <h2>Textansicht</h2>
    <pre>${text}</pre>
  </div>
</div>
<footer><small>Generated by gha-viz</small></footer>
</body></html>`;
}

// ---------- CLI ----------
function main() {
  const cmd = process.argv[2];
  const file = process.argv[3];
  if (!cmd || !file) {
    console.log("Nutzung:");
    console.log("  node index.js text    <workflow.yml>");
    console.log("  node index.js diagram <workflow.yml>   # schreibt output/diagram.html");
    process.exit(1);
  }

  const doc = loadYaml(file);
  const model = parseWorkflow(doc);

  if (cmd === "text") {
    console.log(renderText(model));
  } else if (cmd === "diagram") {
    const html = renderHTML(model);
    fs.mkdirSync("output", { recursive: true });
    const out = path.join("output", "diagram.html");
    fs.writeFileSync(out, html, "utf8");
    console.log(`✅ Diagram erstellt: ${out}`);
  } else {
    console.log("Unbekannter Befehl:", cmd);
    process.exit(1);
  }
}

if (require.main === module) main();

// Für Tests exportieren:
module.exports = { loadYaml, parseWorkflow, renderText, renderMermaid };

